<?php
/**
 * @file
 * Module hooks.
 */

use Drupal\advanced_varnish_cache\AdvancedVarnishCache;
use Drupal\Core\Logger\RfcLogLevel;

// Set header name.
const ADVANCED_VARNISH_CACHE_HEADER_CACHE_TAG = 'X-TAG';
const ADVANCED_VARNISH_CACHE_HEADER_GRACE, 'X-GRACE';
const ADVANCED_VARNISH_CACHE_HEADER_RNDPAGE = 'X-RNDPAGE';
const ADVANCED_VARNISH_CACHE_HEADER_CACHE_DEBUG = 'X-CACHE-DEBUG';
const ADVANCED_VARNISH_CACHE_COOKIE_BIN = 'AVCEBIN';
const ADVANCED_VARNISH_CACHE_COOKIE_INF = 'AVCEINF';
const ADVANCED_VARNISH_CACHE_X_TTL = 'X-TTL';
const ADVANCED_VARNISH_CACHE_HEADER_ETAG = 'ETag';
const ADVANCED_VARNISH_CACHE_HEADER_DEFLATE_KEY = 'X-DEFLATE-KEY';
const ADVANCED_VARNISH_CACHE_PER_PAGE = 1;
const ADVANCED_VARNISH_CACHE_PER_ROLE = 2;
const ADVANCED_VARNISH_CACHE_PER_USER = 3;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advanced_varnish_cache_form_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Remove forever option from block.
  unset($form['settings']['cache']['max_age']['#options']['-1']);

  // Alter block configuration form to add cache settings for varnish.
  // Get block.
  $id = $form['id']['#default_value'];
  $block = \Drupal\block\Entity\Block::load($id);

  // Get block configuration.
  if ($block) {
    $settings = $block->get('settings');

    // Add ESI block support.
    $form['settings']['cache']['esi'] = array(
      '#type' => 'checkbox',
      '#title' => t('ESI block'),
      '#default_value' => $settings['cache']['esi'] ?: FALSE,
    );

    $options = array(
      ADVANCED_VARNISH_CACHE_PER_PAGE => t('Shared'),
      ADVANCED_VARNISH_CACHE_PER_ROLE => t('Per User Roles'),
      ADVANCED_VARNISH_CACHE_PER_USER => t('Per User ID'),
    );

    $form['settings']['cache']['cachemode'] = array(
      '#title' => t('Cache granularity (Cache bin)'),
      '#description' => t('Choosing those will increase cache relevance, but reduce performance.'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' =>  $settings['cache']['cachemode'] ?: AdvancedVarnishCache::ADVANCED_VARNISH_CACHE_PER_ROLE,
    );
  }
}

/**
 * Implements hook_block_view_alter().
 */
function advanced_varnish_cache_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {

  $block = $build['#block'];

  // Check if ESI for this block enabled and should we
  // replace block content with ESI tag.
  $varnish = new AdvancedVarnishCache();
  if (!$varnish->cachingEnabled() || isset($block->_esi)) {
    return;
  }

  // Get block configuration.
  $conf = $build['#configuration'];
  $esi = !empty($conf['cache']['esi']) ? TRUE : FALSE;
  if (!$esi) {
    return;
  }

  // If we need to replace block with ESI we
  // change #pre_render callback to handle this.
  $build['#theme'] = 'advanced_varnish_cache_esi_block';
  $build['#pre_render'] = [[$varnish, 'buildEsiBlock']];

  // Prevent Drupal from caching ESI block.
  $build['#cache']['max-age'] = 0;
}

/**
 * Implements template_preprocess_advanced_varnish_cache_esi_block().
 */
function template_preprocess_advanced_varnish_cache_esi_block(&$variables) {
  $elements = &$variables['elements'];
  $variables['content'] = $elements['#content'];
}

/**
 * Implements hook_theme().
 */
function advanced_varnish_cache_theme() {
  return array(
    'advanced_varnish_cache_esi_block' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advanced_varnish_cache_form_page_manager_display_variant_edit_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Remove forever option from block.
  unset($form['settings']['cache']['max_age']['#options']['-1']);

  // Get form storage.
  $storage = $form_state->getStorage();

  // Get page variant.
  $page = $form_state->getBuildInfo()['args'][0];
  $vid = $storage['display_variant_id'];
  $variant = $page->getVariant($vid);

  // Get current block from page variant.
  $bid = $storage['block_id'];
  $block = $variant->getBlock($bid);

  // Get block settings.
  if ($block) {
    $settings = $block->getConfiguration();
  }
  $form['settings']['cache']['esi'] = array(
    '#type' => 'checkbox',
    '#title' => t('ESI block'),
    '#default_value' => $settings['cache']['esi'] ?: FALSE,
  );

  $options = array(
    ADVANCED_VARNISH_CACHE_PER_PAGE => t('Shared'),
    ADVANCED_VARNISH_CACHE_PER_ROLE => t('Per User Roles'),
    ADVANCED_VARNISH_CACHE_PER_USER => t('Per User ID'),
  );

  $form['settings']['cache']['cachemode'] = array(
    '#title' => t('Cache granularity (Cache bin)'),
    '#description' => t('Choosing those will increase cache relevance, but reduce performance.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' =>  $settings['cache']['cachemode'] ?: AdvancedVarnishCache::ADVANCED_VARNISH_CACHE_PER_ROLE,
  );

}

/**
 * Implements hook_layout_alter().
 */
function advanced_varnish_cache_layout_alter(&$vars) {
  foreach ($vars as &$layout) {
    $layout['class'] = 'Drupal\advanced_varnish_cache\Plugin\Layout\CacheableLayout';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function advanced_varnish_cache_form_page_manager_display_variant_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $build = $form_state->getBuildInfo();
  $varnish = \Drupal::service('advanced_varnish_cache_handler');

  $page = $build['callback_object']->getPage();
  $display_varaint = $build['callback_object']->getDisplayVariant();
  $display_varaint_id = $display_varaint->id();
  $options = ['displayVariant' => $display_varaint_id];

  $cache_key_generator = $varnish->getCacheKeyGenerator($page, $options);

  $default = \Drupal::config('advanced_varnish_cache.settings');

  $form['cache_setting'] = [
    '#type' => 'details',
    '#title' => t('Cache settings'),
    '#tree' => TRUE,
  ];

  $settings_key = $cache_key_generator->generateSettingsKey();
  $date_formatter = \Drupal::service('date.formatter');
  // Cache time for Varnish.
  $period = array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600,
    10800, 21600, 32400, 43200, 86400);
  $period = array_map(array($date_formatter, 'formatInterval'), array_combine($period, $period));
  $period[0] = t('no caching');
  $form['cache_setting']['ttl'] = [
    '#type' => 'select',
    '#title' => t('Page cache maximum age'),
    '#default_value' => $default->get($settings_key)['cache_settings']['ttl'],
    '#options' => $period,
    '#description' => t('The maximum time a page can be cached by varnish.'),
  ];

  $form['cache_setting']['purge_id'] = [
    '#type' => 'textfield',
    '#title' => t('Cache ID for manual purge'),
    '#disabled' => TRUE,
    '#default_value' => 'page_' . $page->id() . '_' . $display_varaint_id,
  ];

  $form['cache_setting']['purge_now'] = [
    '#type' => 'checkbox',
    '#title' => t('Purge this page cache now'),
  ];

  $form['#submit'][] = [\Drupal::service('advanced_varnish_cache_handler'), 'panelsSettingsSubmit'];
}

/**
 * Implements hook_cron().
 */
function advanced_varnish_cache_cron() {
  $account = \Drupal::currentUser();

  // Prepare variables.
  $varnish = new AdvancedVarnishCache();
  $deflate_conf = \Drupal::config('advanced_varnish_cache.deflate');
  $deflate_info = $deflate_conf->get('info');
  $deflate_ids = $deflate_conf->get('ids');
  $deflate_key = $deflate_info['key'];
  $deflate_value_header = $varnish::ADVANCED_VARNISH_CACHE_HEADER_ETAG;
  $deflate_key_header = $varnish::ADVANCED_VARNISH_CACHE_HEADER_DEFLATE_KEY;

  // If we have something to deflate.
  if (!empty($deflate_ids) && !empty($deflate_key)) {
    for ($i = 0; $i < $deflate_info['step']; $i++) {

      // Double check as we will reduce this array.
      if (!empty($deflate_ids)) {

        // Pick random key to deflate.
        $key = mt_rand(0, count($deflate_ids) - 1);
        $deflate_value = $deflate_ids[$key];

        // Build and execte command.
        $command_line = "ban obj.http.$deflate_value_header ~ \".{8}$deflate_value\" && obj.http.$deflate_key_header != \"$deflate_key\" ";

        // Log action.
        if ($varnish->getSetting('general', 'logging', FALSE)) {
          \Drupal::logger('advanced_varnish_cache:deflate')->log(RfcLogLevel::DEBUG, 'u=@uid !percentage% !command_line', array(
              '@uid' => $account->id(),
              '!command_line' => $command_line,
              '!percentage' => count($deflate_ids),
            )
          );
        }

        // Query Varnish.
        $res = $varnish->varnishTerminalRun([$command_line]);

        // Sleep a bit to save from spam.
        usleep(10000);

        // Update deflate array.
        if (!empty($res)) {
          unset($deflate_ids[$key]);
          $deflate_ids = array_values($deflate_ids);
        }
      }

      // Update deflate conf settings.
      $config_factory = \Drupal::service('config.factory');
      $config = $config_factory->getEditable('advanced_varnish_cache.deflate');
      $config->set('ids', $deflate_ids)
        ->save();
    }

  }
}
